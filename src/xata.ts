// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "users",
    columns: [
      { name: "email", type: "text", notNull: true, defaultValue: "empty" },
      { name: "password", type: "text", notNull: true, defaultValue: "empty" },
      { name: "fullName", type: "text", notNull: true, defaultValue: "empty" },
    ],
    revLinks: [
      { column: "user", table: "salary" },
      { column: "user", table: "accounts" },
      { column: "user", table: "goals" },
      { column: "user", table: "account_contributions" },
      { column: "user", table: "expenses" },
      { column: "user", table: "subscriptions" },
    ],
  },
  {
    name: "salary",
    columns: [
      { name: "salary", type: "float", notNull: true, defaultValue: "0" },
      { name: "payday", type: "datetime", notNull: true, defaultValue: "now" },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "accounts",
    columns: [
      { name: "acct_name", type: "text", notNull: true, defaultValue: "null" },
      { name: "acct_type", type: "text", notNull: true, defaultValue: "null" },
      {
        name: "current_balance",
        type: "float",
        notNull: true,
        defaultValue: "0.00",
      },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "goals",
    columns: [
      { name: "goal", type: "text", notNull: true, defaultValue: "null" },
      {
        name: "target_amount",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      {
        name: "current_amount",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "account_contributions",
    columns: [
      { name: "acct_name", type: "text", notNull: true, defaultValue: "null" },
      {
        name: "contribution_amount",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      {
        name: "balance_after",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "expenses",
    columns: [
      {
        name: "expense_budgeted",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      {
        name: "expense_actual",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      { name: "user", type: "link", link: { table: "users" } },
      {
        name: "expense_name",
        type: "text",
        notNull: true,
        defaultValue: "null",
      },
    ],
  },
  {
    name: "subscriptions",
    columns: [
      {
        name: "subscription_name",
        type: "text",
        notNull: true,
        defaultValue: "null",
      },
      {
        name: "subscription_frequency",
        type: "text",
        notNull: true,
        defaultValue: "null",
      },
      {
        name: "next_payment_date",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      {
        name: "subscription_amount",
        type: "float",
        notNull: true,
        defaultValue: "0",
      },
      { name: "user", type: "link", link: { table: "users" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Salary = InferredTypes["salary"];
export type SalaryRecord = Salary & XataRecord;

export type Accounts = InferredTypes["accounts"];
export type AccountsRecord = Accounts & XataRecord;

export type Goals = InferredTypes["goals"];
export type GoalsRecord = Goals & XataRecord;

export type AccountContributions = InferredTypes["account_contributions"];
export type AccountContributionsRecord = AccountContributions & XataRecord;

export type Expenses = InferredTypes["expenses"];
export type ExpensesRecord = Expenses & XataRecord;

export type Subscriptions = InferredTypes["subscriptions"];
export type SubscriptionsRecord = Subscriptions & XataRecord;

export type DatabaseSchema = {
  users: UsersRecord;
  salary: SalaryRecord;
  accounts: AccountsRecord;
  goals: GoalsRecord;
  account_contributions: AccountContributionsRecord;
  expenses: ExpensesRecord;
  subscriptions: SubscriptionsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://bookworm7572-s-workspace-e0s0n4.us-east-1.xata.sh/db/expense-tracker-db",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
